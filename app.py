# from aiogram import executor
#
# from loader import dp, db
# import middlewares, filters, handlers
# from utils.notify_admins import on_startup_notify
# from utils.set_bot_commands import set_default_commands
#
#
# async def on_startup(dispatcher):
#     # await db.drop_users()
#     await db.create()
#     # await db.create_table_users()
#
#     # Birlamchi komandalar (/star va /help)
#     await set_default_commands(dispatcher)
#
#     # Bot ishga tushgani haqida adminga xabar berish
#     await on_startup_notify(dispatcher)
#
#
# if __name__ == "__main__":
#     executor.start_polling(dp, on_startup=on_startup)

import logging
from aiogram import executor, types
from aiogram.types import InputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards.inline.request_button import site_keys
from loader import dp, db, bot
import middlewares, filters, handlers
from utils.notify_admins import on_startup_notify
from utils.set_bot_commands import set_default_commands

logging.basicConfig(level=logging.INFO)

scheduler = AsyncIOScheduler()

async def send_ad_to_all():
    users = await db.select_all_users()
    for user in users:
        # print(user[3])
        user_id = user[3]
        album = types.MediaGroup()
        photo1 = InputFile(path_or_bytesio="photos/1.jpg")
        photo3 = "https://1mo.pro/img/gallery/5.jpg"
        photo4 = "https://1mo.pro/img/gallery/1.jpg"
        photo5 = "https://1mo.pro/img/gallery/6.jpg"
        photo6 = "https://1mo.pro/img/gallery/4.jpg"
        photo7 = "https://1mo.pro/img/gallery/3.jpg"

        # Attaching photos to the media group
        album.attach_photo(photo=photo7)
        album.attach_photo(photo=photo4)
        album.attach_photo(photo=photo1)
        album.attach_photo(photo=photo5)
        album.attach_photo(photo=photo6)
        album.attach_photo(photo=photo3,
                           caption="üîπ <b>–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 2019 –≥–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü:</b> \n"
                                   "üßπ–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ \n"
                                   "üßΩ–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞ \n"
                                   "üè†–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ \n"
                                   "ü™ü–ú—ã—Ç—å–µ –æ–∫–æ–Ω \n"
                                   "üßº–ú—ã—Ç—å–µ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ \n"
                                   "üè¢–ú—ã—Ç—å–µ —Ñ–∞—Å–∞–¥–æ–≤ \n"
                                   "üß¥–ì–ª—É–±–æ–∫–∞—è —É–±–æ—Ä–∫–∞ \n"
                                   "üî¨–•–∏–º–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ \n"
                                   "üåßÔ∏è–£–±–æ—Ä–∫–∞ –≤–æ–¥–æ—Å—Ç–æ–∫–æ–≤ \n"
                                   "ü™ë–£–±–æ—Ä–∫–∞ –ø–∞—Ä–∫–µ—Ç–∞ \n"
                                   "üßπ–£–±–æ—Ä–∫–∞ –ø–ª–∏—Ç–∫–∏ ü™ü–∂–∞–ª—é–∑–∏ ü™ü—Å—Ç–∞–≤–Ω–µ–π üèä–±–∞—Å—Å–µ–π–Ω–∞ –∏.—Ç.–¥.\n"
                                   "\n‚ú® <i>–ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ —Ö–æ—Ç—è—Ç, —á—Ç–æ–±—ã –∏—Ö –¥–æ–º –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å–≤–µ—Ç–æ–º —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–µ –æ–∫–Ω–∞ –∏ –∏–º–µ–ª –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–∞—Å–∞–¥, —Ä–∞–¥—É—é—â–∏–π –≥–ª–∞–∑.</i>")

        # Sending the media group and additional message
        # await bot.send_media_group(chat_id=user_id, media=album)
        # await bot.send_message(chat_id=user_id, text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=site_keys)
        try:
            await bot.send_media_group(chat_id=user_id, media=album)
            await bot.send_message(chat_id=user_id, text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                   reply_markup=site_keys)
        except Exception as e:
            logging.error(f"Error sending message to {user_id}: {e}")

async def on_startup(dispatcher):
    # await db.drop_users()
    await db.create()
    # await db.create_table_users()

    # Birlamchi komandalar (/start va /help)
    await set_default_commands(dispatcher)

    # Bot ishga tushgani haqida adminga xabar berish
    await on_startup_notify(dispatcher)

    # Jadvalga avtomatik xabar yuborish funksiyasini qo'shish
    scheduler.add_job(send_ad_to_all, 'cron', hour=7, minute=0)
    scheduler.start()


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
